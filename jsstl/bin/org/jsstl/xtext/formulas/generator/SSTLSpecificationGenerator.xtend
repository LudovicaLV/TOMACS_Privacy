/*
 * generated by Xtext
 */
package org.jsstl.xtext.formulas.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import com.google.inject.Inject
import org.jsstl.xtext.formulas.sSTLSpecification.Model
import org.jsstl.xtext.formulas.sSTLSpecification.ConstDeclaration
import org.jsstl.xtext.formulas.sSTLSpecification.Expression
import org.jsstl.xtext.formulas.sSTLSpecification.IntExpression
import org.jsstl.xtext.formulas.sSTLSpecification.FloatExpression
import org.jsstl.xtext.formulas.sSTLSpecification.TrueFormula
import org.jsstl.xtext.formulas.sSTLSpecification.FalseFormula
import org.jsstl.xtext.formulas.sSTLSpecification.NotExpression
import org.jsstl.xtext.formulas.sSTLSpecification.UnaryMinusExpression
import org.jsstl.xtext.formulas.sSTLSpecification.LiteralExpression
import org.jsstl.xtext.formulas.sSTLSpecification.VariableDeclarations
import org.jsstl.xtext.formulas.sSTLSpecification.ParameterDeclaration
import org.jsstl.xtext.formulas.sSTLSpecification.MulExpression
import org.jsstl.xtext.formulas.sSTLSpecification.DivExpression
import org.jsstl.xtext.formulas.sSTLSpecification.SumExpression
import org.jsstl.xtext.formulas.sSTLSpecification.DiffExpression
import org.jsstl.xtext.formulas.sSTLSpecification.LessRelationExpression
import org.jsstl.xtext.formulas.sSTLSpecification.LessOrEqualRelationExpression
import org.jsstl.xtext.formulas.sSTLSpecification.GreaterOrEqualRelationExpression
import org.jsstl.xtext.formulas.sSTLSpecification.GreaterRelationExpression
import org.jsstl.xtext.formulas.sSTLSpecification.FormulaDeclaration
import org.jsstl.xtext.formulas.sSTLSpecification.OrFormula
import org.jsstl.xtext.formulas.sSTLSpecification.AndFormula
import org.jsstl.xtext.formulas.sSTLSpecification.UntilFormula
import org.jsstl.xtext.formulas.sSTLSpecification.GloballyFormula
import org.jsstl.xtext.formulas.sSTLSpecification.EventuallyFormula
import org.jsstl.xtext.formulas.sSTLSpecification.SurroundFormula
import org.jsstl.xtext.formulas.sSTLSpecification.SomewhereFormula
import org.jsstl.xtext.formulas.sSTLSpecification.EverywhereFormula
import org.jsstl.xtext.formulas.sSTLSpecification.NotFormula
import org.jsstl.xtext.formulas.sSTLSpecification.ReferencedFormula
import org.jsstl.xtext.formulas.sSTLSpecification.AtomicFormula
import org.jsstl.xtext.formulas.sSTLSpecification.RelationExpression
import org.jsstl.xtext.formulas.sSTLSpecification.Interval
import org.jsstl.xtext.formulas.util.Utilities

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class SSTLSpecificationGenerator implements IGenerator {

	@Inject extension Utilities

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		var packageName = resource.URI.packageName
		var className = resource.URI.className
		var m = resource.allContents.toIterable.filter(typeof(Model)).head
		if (m != null) {
			fsa.generateFile(packageName+'/'+className+".java" , 
				m.generateJavaCode( packageName.replace('/','.') , className )
			)			
		}		
	}
	
	public final static String CONST_POSTFIX = "_CONST_";
	public final static String VAR_POSTFIX = "_VAR_";
	public final static String PAR_POSTFIX = "_PAR_";
	
	def generateJavaCode( Model model , String packageName , String className ) {
		'''
		package «packageName»;
		
		import org.jsstl.core.formula.*;
		import java.util.Map;		
		
		public class «className» extends jSSTLScript {
			
			«FOR e:model.elements.filter(typeof(ConstDeclaration))»
			public static final double «e.name+CONST_POSTFIX» = «e.value.generateExpressionCode»;
			«ENDFOR»
			
			«FOR v:model.elements.filter(typeof(VariableDeclarations)).generateVariableIndexes»
			public static final int «v.key.name+VAR_POSTFIX» = «v.value»;
			«ENDFOR»
			
			public «className»() {
				super( 
					new String[] {
						«FOR f:model.elements.filter(typeof(VariableDeclarations)) SEPARATOR ','»
						"«f.name»"
						«ENDFOR»
					}
				);	
				«FOR f:model.elements.filter(typeof(FormulaDeclaration))»
				addFormula( "«f.name»" ,
					«f.body.generateFormulaCode» ,
					null );
				«ENDFOR»
				«FOR p:model.elements.filter(typeof(ParameterDeclaration))»
				addParameter( "«p.name»" , 
					(double) «p.range.min.generateExpressionCode» , 
					(double) «p.range.max.generateExpressionCode» );
				«ENDFOR»
			}

		}
		'''
	}
	
	def generateVariableIndexes( Iterable<VariableDeclarations> variables ) {
		var counter = 0;
		var toReturn = newLinkedList()
		for (v : variables) {
			toReturn.add(new Pair(v,counter))
			counter = counter+1
		}
		toReturn
	}
	
	def dispatch CharSequence generateExpressionCode( IntExpression e ) {
		'''«e.value»'''
	}
	
	def dispatch CharSequence generateExpressionCode( FloatExpression e ) {
		'''«e.intPart».«e.decPart»'''
	}
	
	def dispatch CharSequence generateExpressionCode( TrueFormula e ) {
		'''true'''
	}
	
	def dispatch CharSequence generateExpressionCode( FalseFormula e ) {
		'''false'''
	}
	
	def dispatch CharSequence generateExpressionCode( NotExpression e ) {
		'''!( «e.arg.generateExpressionCode» )'''
	}
	
	def dispatch CharSequence generateExpressionCode( UnaryMinusExpression e ) {
		'''-( «e.arg.generateExpressionCode» )'''
	}
	
	def dispatch CharSequence generateExpressionCode( LiteralExpression e ) {
		val v = e.reference
		switch v {
			VariableDeclarations: '''variables[getIndex(«v.name+VAR_POSTFIX»)]'''
			ConstDeclaration: v.name+CONST_POSTFIX
			ParameterDeclaration: '''parameters.get("«v.name»")'''
		}	
	}
	
	def dispatch CharSequence generateExpressionCode( MulExpression e ) {
		'''( «e.left.generateExpressionCode» )*( «e.right.generateExpressionCode» )'''
	}
	
	def dispatch CharSequence generateExpressionCode( DivExpression e ) {
		'''( «e.left.generateExpressionCode» )/( «e.right.generateExpressionCode» )'''
	}
	
	def dispatch CharSequence generateExpressionCode( SumExpression e ) {
		'''( «e.left.generateExpressionCode» )+( «e.right.generateExpressionCode» )'''
	}
	
	def dispatch CharSequence generateExpressionCode( DiffExpression e ) {
		'''( «e.left.generateExpressionCode» )-( «e.right.generateExpressionCode» )'''
	}
	
	def dispatch CharSequence generateExpressionCode( LessRelationExpression e ) {
		'''((«e.right.generateExpressionCode») - («e.left.generateExpressionCode»))'''
	}
	
	def dispatch CharSequence generateExpressionCode( LessOrEqualRelationExpression e ) {
		'''((«e.right.generateExpressionCode») - («e.left.generateExpressionCode»))'''
	}
	
	def dispatch CharSequence generateExpressionCode( GreaterOrEqualRelationExpression e ) {
		'''((«e.left.generateExpressionCode») - («e.right.generateExpressionCode»))'''
	}
	
	def dispatch CharSequence generateExpressionCode( GreaterRelationExpression e ) {
		'''((«e.left.generateExpressionCode») - («e.right.generateExpressionCode»))'''
	}
	
	def dispatch CharSequence generateExpressionCode( Expression e ) {
		'''0'''
	}


	def dispatch CharSequence generateFormulaCode( OrFormula formula ) {
		'''
		new OrFormula( 
			«formula.left.generateFormulaCode» ,
			«formula.right.generateFormulaCode»
		)
		'''
	}

	def dispatch CharSequence generateFormulaCode( AndFormula formula ) {
		'''
		new AndFormula( 
			«formula.left.generateFormulaCode» ,
			«formula.right.generateFormulaCode»
		)
		'''
	}

	def dispatch CharSequence generateFormulaCode( UntilFormula formula ) {
		'''
		new UntilFormula( 
			«formula.interval.generateParametricIntervalCode» ,
			«formula.left.generateFormulaCode» ,
			«formula.right.generateFormulaCode»
		)
		'''
	}

	def dispatch CharSequence generateFormulaCode( GloballyFormula formula ) {
		'''
		new GloballyFormula( 
			«formula.interval.generateParametricIntervalCode» ,
			«formula.arg.generateFormulaCode»
		)		
		'''
	}

	def CharSequence generateParametricIntervalCode( Interval interval ) {
		'''
		new ParametricInterval( 
			new ParametricExpression() {
			
				public SignalExpression eval( final Map<String,Double> parameters ) {

					return new SignalExpression() {
						
						public double eval( double ... variables ) {
							return «interval.min.generateExpressionCode»;
						}
						
					};					
					
				}
				
			} , 
			new ParametricExpression() {
			
				public SignalExpression eval( final Map<String,Double> parameters ) {

					return new SignalExpression() {
						
						public double eval( double ... variables ) {
							return «interval.max.generateExpressionCode»;
						}
						
					};					
					
				}
				
			} 		
		)		
		'''		
	}

	def dispatch CharSequence generateFormulaCode( EventuallyFormula formula ) {
		'''
		new EventuallyFormula( 
			«formula.interval.generateParametricIntervalCode» ,
			«formula.arg.generateFormulaCode»
		)		
		'''
	}

	def dispatch CharSequence generateFormulaCode( SurroundFormula formula ) {
		'''
		new SurroundFormula( 
			«formula.interval.generateParametricIntervalCode» ,
			«formula.left.generateFormulaCode» ,
			«formula.right.generateFormulaCode»
		)		
		'''
	}

	def dispatch CharSequence generateFormulaCode( SomewhereFormula formula ) {
		'''
		new SomewhereFormula( 
			«formula.interval.generateParametricIntervalCode» ,
			«formula.arg.generateFormulaCode»
		)		
		'''
	}

	def dispatch CharSequence generateFormulaCode( EverywhereFormula formula ) {
		'''
		new EverywhereFormula( 
			«formula.interval.generateParametricIntervalCode» ,
			«formula.arg.generateFormulaCode»
		)		
		'''
	}

	def dispatch CharSequence generateFormulaCode( NotFormula formula ) {
		'''
		new NotFormula( 
			«formula.arg.generateFormulaCode»
		)		
		'''
	}

	def dispatch CharSequence generateFormulaCode( ReferencedFormula formula ) {
		'''
		new ReferencedFormula( 
			this ,
			"«formula.reference.name»"
		)		
		'''
	}
	
	def dispatch CharSequence generateFormulaCode( AtomicFormula formula ) {
		'''
		new AtomicFormula( 
			new ParametricExpression( ) {
			
				public SignalExpression eval( Map<String, Double> parameters ) {
					
					return new SignalExpression() {						
								
						public double eval(double... variables) {
							return «formula.value.generateExpressionCode»;
						}	
											
					};	
								
				}
			
			} , 
			«formula.value.strictParameter»
		)		
		'''
	}
	
	def getStrictParameter( RelationExpression r ) {
		switch r {
			LessOrEqualRelationExpression: '''false'''
			LessRelationExpression: '''true'''
			GreaterOrEqualRelationExpression: '''false'''
			GreaterRelationExpression: '''true'''
		}		
	}
}
